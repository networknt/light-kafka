/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.networknt.kafka.common;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventId extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8281982261514519569L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventId\",\"namespace\":\"com.networknt.kafka.common\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"a unique identifier\"},{\"name\":\"nonce\",\"type\":\"long\",\"doc\":\"the number of the transactions for the user\"},{\"name\":\"derived\",\"type\":\"boolean\",\"doc\":\"indicate if the event is derived from event processor\",\"default\":false}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventId> ENCODER =
      new BinaryMessageEncoder<EventId>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventId> DECODER =
      new BinaryMessageDecoder<EventId>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventId> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventId> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventId> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventId>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventId to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventId from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventId instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventId fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** a unique identifier */
   private java.lang.String id;
  /** the number of the transactions for the user */
   private long nonce;
  /** indicate if the event is derived from event processor */
   private boolean derived;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventId() {}

  /**
   * All-args constructor.
   * @param id a unique identifier
   * @param nonce the number of the transactions for the user
   * @param derived indicate if the event is derived from event processor
   */
  public EventId(java.lang.String id, java.lang.Long nonce, java.lang.Boolean derived) {
    this.id = id;
    this.nonce = nonce;
    this.derived = derived;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return nonce;
    case 2: return derived;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: nonce = (java.lang.Long)value$; break;
    case 2: derived = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return a unique identifier
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * a unique identifier
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'nonce' field.
   * @return the number of the transactions for the user
   */
  public long getNonce() {
    return nonce;
  }


  /**
   * Sets the value of the 'nonce' field.
   * the number of the transactions for the user
   * @param value the value to set.
   */
  public void setNonce(long value) {
    this.nonce = value;
  }

  /**
   * Gets the value of the 'derived' field.
   * @return indicate if the event is derived from event processor
   */
  public boolean getDerived() {
    return derived;
  }


  /**
   * Sets the value of the 'derived' field.
   * indicate if the event is derived from event processor
   * @param value the value to set.
   */
  public void setDerived(boolean value) {
    this.derived = value;
  }

  /**
   * Creates a new EventId RecordBuilder.
   * @return A new EventId RecordBuilder
   */
  public static com.networknt.kafka.common.EventId.Builder newBuilder() {
    return new com.networknt.kafka.common.EventId.Builder();
  }

  /**
   * Creates a new EventId RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventId RecordBuilder
   */
  public static com.networknt.kafka.common.EventId.Builder newBuilder(com.networknt.kafka.common.EventId.Builder other) {
    if (other == null) {
      return new com.networknt.kafka.common.EventId.Builder();
    } else {
      return new com.networknt.kafka.common.EventId.Builder(other);
    }
  }

  /**
   * Creates a new EventId RecordBuilder by copying an existing EventId instance.
   * @param other The existing instance to copy.
   * @return A new EventId RecordBuilder
   */
  public static com.networknt.kafka.common.EventId.Builder newBuilder(com.networknt.kafka.common.EventId other) {
    if (other == null) {
      return new com.networknt.kafka.common.EventId.Builder();
    } else {
      return new com.networknt.kafka.common.EventId.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventId instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventId>
    implements org.apache.avro.data.RecordBuilder<EventId> {

    /** a unique identifier */
    private java.lang.String id;
    /** the number of the transactions for the user */
    private long nonce;
    /** indicate if the event is derived from event processor */
    private boolean derived;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.networknt.kafka.common.EventId.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.derived)) {
        this.derived = data().deepCopy(fields()[2].schema(), other.derived);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing EventId instance
     * @param other The existing instance to copy.
     */
    private Builder(com.networknt.kafka.common.EventId other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.nonce)) {
        this.nonce = data().deepCopy(fields()[1].schema(), other.nonce);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.derived)) {
        this.derived = data().deepCopy(fields()[2].schema(), other.derived);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * a unique identifier
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * a unique identifier
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.networknt.kafka.common.EventId.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * a unique identifier
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * a unique identifier
      * @return This builder.
      */
    public com.networknt.kafka.common.EventId.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'nonce' field.
      * the number of the transactions for the user
      * @return The value.
      */
    public long getNonce() {
      return nonce;
    }


    /**
      * Sets the value of the 'nonce' field.
      * the number of the transactions for the user
      * @param value The value of 'nonce'.
      * @return This builder.
      */
    public com.networknt.kafka.common.EventId.Builder setNonce(long value) {
      validate(fields()[1], value);
      this.nonce = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'nonce' field has been set.
      * the number of the transactions for the user
      * @return True if the 'nonce' field has been set, false otherwise.
      */
    public boolean hasNonce() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'nonce' field.
      * the number of the transactions for the user
      * @return This builder.
      */
    public com.networknt.kafka.common.EventId.Builder clearNonce() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'derived' field.
      * indicate if the event is derived from event processor
      * @return The value.
      */
    public boolean getDerived() {
      return derived;
    }


    /**
      * Sets the value of the 'derived' field.
      * indicate if the event is derived from event processor
      * @param value The value of 'derived'.
      * @return This builder.
      */
    public com.networknt.kafka.common.EventId.Builder setDerived(boolean value) {
      validate(fields()[2], value);
      this.derived = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'derived' field has been set.
      * indicate if the event is derived from event processor
      * @return True if the 'derived' field has been set, false otherwise.
      */
    public boolean hasDerived() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'derived' field.
      * indicate if the event is derived from event processor
      * @return This builder.
      */
    public com.networknt.kafka.common.EventId.Builder clearDerived() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventId build() {
      try {
        EventId record = new EventId();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.nonce = fieldSetFlags()[1] ? this.nonce : (java.lang.Long) defaultValue(fields()[1]);
        record.derived = fieldSetFlags()[2] ? this.derived : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventId>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventId>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventId>
    READER$ = (org.apache.avro.io.DatumReader<EventId>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeLong(this.nonce);

    out.writeBoolean(this.derived);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.nonce = in.readLong();

      this.derived = in.readBoolean();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.nonce = in.readLong();
          break;

        case 2:
          this.derived = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










